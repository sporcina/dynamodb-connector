package org.mule.modules.samples;

import com.amazonaws.services.dynamodbv2.datamodeling.*;

// TODO:  The name of the table is duplicated here and in the test.properties.  I have a solution to remove the
// duplication.  I just need to port it from the other project - sporcina (Oct.3, 2013)
@DynamoDBTable(tableName="DynamoDbConnectorTestTable_toDelete")
public class FakeCustomer {

    private String num;
    private String name;
    private String phone;


    public FakeCustomer() {}


    @DynamoDBHashKey(attributeName = "num")
    @DynamoDBAutoGeneratedKey
    // important: Only String-typed keys can use the @DynamoDBAutoGeneratedKey annotation - sporcina (Oct.3/2013)
    public String getNum() {
        return num;
    }

    public FakeCustomer setNum(String num) {
        this.num = num;
        return this;
    }

    @DynamoDBAttribute(attributeName="name")
    public String getName() {
        return name;
    }

    public FakeCustomer setName(String name) {
        this.name = name;
        return this;
    }

    @DynamoDBAttribute(attributeName="phone")
    public String getPhone() {
        return phone;
    }

    public FakeCustomer setPhone(String phone) {
        this.phone = phone;
        return this;
    }


    @Override
    public boolean equals(Object o) {
        // checks to see if the two operands point to the same object (does not verify if they are equivalent)
        if (this == o) return true;

        if (o == null || getClass() != o.getClass()) return false;

        FakeCustomer fakeCustomer = (FakeCustomer) o;

        if (num != null ? !num.equals(fakeCustomer.num) : fakeCustomer.num != null)
            return false;
        if (name != null ? !name.equals(fakeCustomer.name) : fakeCustomer.name != null)
            return false;
        if (phone != null ? !phone.equals(fakeCustomer.phone) : fakeCustomer.phone != null)
            return false;

        return true;
    }


    /**
     * Check if another copy of FakeCustomer is equal, ignoring the 'num' value
     *
     * 'num' is automatically generated.  When exercising acceptance tests, we do not know the value that it will
     * be assigned.  This method was created to compare the key data inside request/response tests.
     *
     * @param o
     *          the object, of type FakeCustomer, to compare with
     * @return
     *          true: if everything but 'num' is equal, false if otherwise
     */
    public boolean equals_IgnoreNumValue(Object o) {
        // checks to see if the two operands point to the same object (does not verify if they are equivalent)
        if (this == o) return true;

        if (o == null || getClass() != o.getClass()) return false;

        FakeCustomer fakeCustomer = (FakeCustomer) o;

        if (name != null ? !name.equals(fakeCustomer.name) : fakeCustomer.name != null)
            return false;
        if (phone != null ? !phone.equals(fakeCustomer.phone) : fakeCustomer.phone != null)
            return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = num != null ? num.hashCode() : 0;
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (phone != null ? phone.hashCode() : 0);
        return result;
    }

    public void reset() {
        setNum(null);
        setName(null);
        setPhone(null);
    }

    @Override
    public String toString() {
        return "FakeCustomer {" +
                "num='" + getNum() + '\'' +
                ", name='" + getName() + '\'' +
                ", phone='" + getPhone() + '\'' +
                '}';
    }
}